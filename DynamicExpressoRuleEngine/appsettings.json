{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*",
  "RuleEngine": {
    "Rules": [
      {
        "RuleName": "Missing Loan Number",
        "Condition": "string.IsNullOrWhiteSpace(LoanNumber)",
        "Action": "AddError(105, \"Loan number is missing.\", \"LoanNumber\")"
      },
      {
        "RuleName": "Policy Term Error",
        "Condition": "loanDetails.LoanPurpose.ToLower().Contains(\"purchase\") && !string.IsNullOrEmpty(ExpirationDate) && !string.IsNullOrEmpty(EffectiveDate) && DateTime.Parse(ExpirationDate) <= DateTime.Parse(EffectiveDate).AddYears(1)",
        "Action": "AddError(115, \"Policy term is less than 12 months.\", \"\")"
      },
      {
        "RuleName": "Refinance Expiration Date Error",
        "Condition": "loanDetails.LoanPurpose.ToLower().Contains(\"refinance\") && !string.IsNullOrEmpty(ExpirationDate) && loanDetails.ClosingDate is DateTime && DateTime.Parse(ExpirationDate).Subtract((DateTime)loanDetails.ClosingDate).TotalDays < 60",
        "Action": "AddError(115, \"Policy expires within 60 days of closing date.\", \"\", \"Refinance Expiration Date Error\")"
      },
      {
        "RuleName": "Expiration Date Error",
        "Condition": "!string.IsNullOrEmpty(ExpirationDate) && loanDetails.ClosingDate is DateTime && DateTime.Parse(ExpirationDate) < (DateTime)loanDetails.ClosingDate",
        "Action": "AddError(115, \"Policy expires before loan closes.\", \"ExpirationDate\")"
      },
      {
        "RuleName": "Effective Date Error",
        "Condition": "!string.IsNullOrEmpty(EffectiveDate) && loanDetails.ClosingDate is DateTime && DateTime.Parse(EffectiveDate) > (DateTime)loanDetails.ClosingDate",
        "Action": "AddError(116, \"Effective date cannot be after the closing date.\", \"EffectiveDate\")"
      },
      {
        "RuleName": "LoanNumber Potential Value",
        "Condition": "string.IsNullOrEmpty(LoanNumber) && !string.IsNullOrEmpty(loanDetails.LoanNumber)",
        "Action": "AddPotentialValues(loanDetails.LoanNumber, \"LoanNumber\")"
      },
      {
        "RuleName": "Loan Number Mismatch",
        "Condition": "!string.IsNullOrEmpty(LoanNumber) && !string.IsNullOrEmpty(loanDetails.LoanNumber) && string.Compare(LoanNumber, loanDetails.LoanNumber, true) != 0",
        "Action": "AddError(117, \"There is a potential mismatch between document loan number and LOS loan number.\", \"LoanNumber\")"
      },
      {
        "RuleName": "Deductible - from dwelling coverage",
        "Condition": "!string.IsNullOrEmpty(Deductible) && !string.IsNullOrEmpty(DwellingCoverage) && decimal.Parse(Deductible) < 50M && decimal.Parse(Deductible) >= 0",
        "Action": "AddValue((decimal.Parse(Deductible) > 1 ? decimal.Parse(Deductible) / 100M : decimal.Parse(Deductible)) * decimal.Parse(DwellingCoverage), \"Deductible\") #AddNotes(\"Deductible was converted from percentage of dwelling coverage to a dollar amount\", \"Deductible\")"
      },
      {
        "RuleName": "Deductible Error",
        "Condition": "!string.IsNullOrEmpty(Deductible) && decimal.Parse(Deductible) < 0",
        "Action": "AddError(104, \"Deductible cannot be a negative number.\", \"Deductible\", \"Deductible Error\")"
      },
      {
        "RuleName": "Forward Chaining - MaxDeductible",
        "Condition": "true",
        "Action": "SetVariable(0M, \"MaxDeductible\")"
      },
      {
        "RuleName": "Forward Chaining - MaxDeductible",
        "Condition": "!string.IsNullOrEmpty(Deductible) && !string.IsNullOrEmpty(DwellingCoverage) && (new List<string> { \"farmershomeadministration\", \"usda\" }).Contains(loanDetails?.LoanType?.ToLower()??\"no data\")",
        "Action": "SetVariable(decimal.Parse(DwellingCoverage) * .05M > 1000M? decimal.Parse(DwellingCoverage) * .05M  : 1000M, \"MaxDeductible\")"
      },
      {
        "RuleName": "Validation - Deductible",
        "Condition": "MaxDeductible > 1000M",
        "Action": "AddNotes(string.Format(\"USDA maximum deductible {0:C} calculated using 5% of dwelling coverage\", MaxDeductible), \"Deductible\")"
      },
      {
        "RuleName": "USDA Loan Deductible Error",
        "Condition": "MaxDeductible < decimal.Parse(Deductible)",
        "Action": "AddError(104, string.Format(\"Deductible is greater than maximum deductible {0:C}.\", MaxDeductible), \"Deductible\", \"USDA Loan Deductible Error\")"
      },
      {
        "RuleName": "Florida RCE Exception",
        "Condition": "!string.IsNullOrEmpty(loanDetails?.Property?.State) && loanDetails.Property.State.ToUpper().Contains(\"FL\")",
        "Action": "AddError(104, \"Property is located in Florida. Replacement Cost Estimate unavailable.\", \"ReplacementCoverage\", \"Florida RCE Exception\")"
      },
      {
        "RuleName": "Underwriter Review Needed",
        "Condition": "!string.IsNullOrEmpty(DwellingCoverage) && !string.IsNullOrEmpty(PolicyType) && PolicyType.ToString().ToLower().Contains(\"condo\")",
        "Action": "AddError(104, \"Dwelling coverage not found, policy may need additional review by underwriter.\", \"DwellingCoverage\", \"Underwriter Review Needed\")"
      },
      {
        "RuleName": "Forward Chaining - ExtendedCov",
        "Condition": "true",
        "Action": "SetVariable(0, \"ExtendedCov\")"
      },
      {
        "RuleName": "Forward Chaining - OtherStructure",
        "Condition": "true",
        "Action": "SetVariable(0, \"OtherStructure\")"
      },
      {
        "RuleName": "Forward Chaining - ExtendedCov",
        "Condition": "!string.IsNullOrEmpty(LoanAmount) && !string.IsNullOrEmpty(DwellingCoverage)",
        "Action": "!string.IsNullOrEmpty(ExtendedReplacementCoverage)? SetVariable(decimal.Parse(ExtendedReplacementCoverage) < 1000? (decimal.Parse(ExtendedReplacementCoverage) / 100) * decimal.Parse(DwellingCoverage) : decimal.Parse(ExtendedReplacementCoverage), \"ExtendedCov\"): SetVariable(0, \"ExtendedCov\")"
      },
      {
        "RuleName": "Forward Chaining - OtherStructure",
        "Condition": "!string.IsNullOrEmpty(LoanAmount) && !string.IsNullOrEmpty(DwellingCoverage)",
        "Action": "!string.IsNullOrEmpty(OtherStructures)? SetVariable(decimal.Parse(OtherStructures), \"OtherStructure\"): SetVariable(0, \"OtherStructure\")"
      },
      {
        "RuleName": "Add Potential Value - ReplacementCoverage",
        "Condition": "!string.IsNullOrEmpty(LoanAmount) && !string.IsNullOrEmpty(DwellingCoverage)",
        "Action": "AddPotentialValues(((decimal.Parse(DwellingCoverage) + ExtendedCov + OtherStructure)/decimal.Parse(LoanAmount))*100M, \"ReplacementCoverage\")"
      },
      {
        "RuleName": "Add Note - ReplacementCoverage",
        "Condition": "!string.IsNullOrEmpty(LoanAmount) && !string.IsNullOrEmpty(DwellingCoverage)",
        "Action": "AddNotes(string.Format(\"Replacement coverage potential value determined using calculation ({0} other structure + {1} dwelling coverage + {2} extended replacement coverage) / {3} loan amount.\", ToStringFormat(OtherStructure), ToStringFormat(DwellingCoverage), ToStringFormat(ExtendedCov), ToStringFormat(LoanAmount)), \"ReplacementCoverage\")"
      },
      {
        "RuleName": "Validate - PolicyAmountDue",
        "Condition": "!string.IsNullOrEmpty(AnnualPremium) && !string.IsNullOrEmpty(PolicyAmountPrepaid)",
        "Action": "AddPotentialValues(decimal.Parse(AnnualPremium) - decimal.Parse(PolicyAmountPrepaid), \"PolicyAmountDue\") #AddNotes(\"Potential value derived by subtracting policy amount paid from total premium\", \"PolicyAmountDue\")"
      },
      {
        "RuleName": "Validate - PolicyAmountPrepaid",
        "Condition": "string.IsNullOrEmpty(PolicyAmountPrepaid) && !string.IsNullOrEmpty(AnnualPremium) && !string.IsNullOrEmpty(PolicyAmountDue)",
        "Action": "AddValue(decimal.Parse(AnnualPremium) - decimal.Parse(PolicyAmountDue), \"PolicyAmountPrepaid\") #AddNotes(\"System is calculating policy amount prepaid by subtracting policy amount due from annual premium.\", \"PolicyAmountPrepaid\")"
      },
      {
        "RuleName": "ACV Detected",
        "Condition": "!string.IsNullOrEmpty(AcvPresent) && AcvPresent.ToLower() == \"true\"",
        "Action": "AddError(104, \"MORi has determined that this homeowners policy may provide for claims to be settled on an actual cash value (ACV) basis. Underwriter review is required to determine if this policy meets investor guidelines and/or customer overlays.\", \"AcvPresent\", \"ACV Detected\")"
      },
      {
        "RuleName": "Insufficient Coverage",
        "Condition": "PolicyType == \"Standard_HOI\" && !string.IsNullOrEmpty(ReplacementCoverage) && decimal.Parse(ReplacementCoverage) < clientsRule.HoiReplacementCost",
        "Action": "AddError(118, string.Format(\"Replacement coverage is less than {0}%\", clientsRule.HoiReplacementCost), \"ReplacementCoverage\", \"Insufficient Coverage\")"
      },
      {
        "RuleName": "Insufficient Coverage",
        "Condition": "PolicyType?.ToLower()?.Contains(\"condo\")??false && !string.IsNullOrEmpty(ReplacementCoverage) && decimal.Parse(ReplacementCoverage) < clientsRule.HoiCondoReplacementCost",
        "Action": "AddError(118, string.Format(\"Replacement coverage of at least {0}% required for condos.\", clientsRule.HoiCondoReplacementCost), \"ReplacementCoverage\", \"Insufficient Coverage\")"
      },
      {
        "RuleName": "Deductible Calculation Error",
        "Condition": "!string.IsNullOrEmpty(Deductible) && !string.IsNullOrEmpty(DwellingCoverage) && decimal.Parse(Deductible) > (decimal.Parse(DwellingCoverage) * (clientsRule.HoiDeductiblePercentage / 100))",
        "Action": "AddError(118, string.Format(\"Deductible is greater than {0}% of the Dwelling Coverage.\", clientsRule.HoiDeductiblePercentage), \"\", \"Deductible Calculation Error\")"
      },
      {
        "RuleName": "Forward Chaining - DateErrorFlag",
        "Condition": "true",
        "Action": "SetVariable(false, \"DateErrorFlag\")"
      },
      {
        "RuleName": "Forward Chaining - DateErrorFlag",
        "Condition": "!string.IsNullOrEmpty(EffectiveDate) && loanDetails.ClosingDate is DateTime && loanDetails.LoanPurpose.ToLower().Contains(\"purchase\")",
        "Action": "SetVariable(true, \"DateErrorFlag\")"
      },
      {
        "RuleName": "Effective Date Error",
        "Condition": "DateErrorFlag && loanDetails.ClosingDate.Subtract(DateTime.Parse(EffectiveDate)).TotalDays > clientsRule.HoiEffectiveDateNumDays",
        "Action": "AddError(116, string.Format(\"Policy effective date is not within {0} days of closing date.\", clientsRule.HoiEffectiveDateNumDays), \"\")"
      },
      {
        "RuleName": "Effective Date Month Error",
        "Condition": "DateErrorFlag && clientsRule.HoiEffectiveDateSameMonth && DateTime.Parse(EffectiveDate) < (DateTime)loanDetails.ClosingDate && DateTime.Parse(EffectiveDate).Month != ((DateTime)loanDetails.ClosingDate).Month",
        "Action": "AddError(119, \"Policy effective date is not within the same month as the closing date.\", \"\")"
      },
      {
        "RuleName": "Add Potential Value - DocumentType",
        "Condition": "!string.IsNullOrEmpty(DocumentType)",
        "Action": "AddPotentialValues(DocumentType, \"DocumentType\") #AddPotentialValues(new List<object>() { \"Quote\", \"Invoice\", \"Proposal\" }, \"DocumentType\")"
      },
      {
        "RuleName": "Secondary Classification Not Validated",
        "Condition": "!string.IsNullOrEmpty(DocumentType) && ContainsAny(new List<string> { \"quote\", \"invoice\", \"proposal\" }, DocumentType)",
        "Action": "AddError(133, \"The submitted document is not an Insurance Policy or Declarations Page.\", \"DocumentType\")"
      }
    ]
  },
  "Done": {
    "Rules": [
      {
        "RuleName": "Missing Loan Number",
        "Condition": "string.IsNullOrWhiteSpace(LoanNumber)",
        "Action": "AddError(105, \"Loan number is missing.\", \"LoanNumber\")"
      },
      {
        "RuleName": "Policy Term Error",
        "Condition": "loanDetails.LoanPurpose.ToLower().Contains(\"purchase\") && !string.IsNullOrEmpty(ExpirationDate) && !string.IsNullOrEmpty(EffectiveDate) && DateTime.Parse(ExpirationDate) <= DateTime.Parse(EffectiveDate).AddYears(1)",
        "Action": "AddError(115, \"Policy term is less than 12 months.\", \"\")"
      },
      {
        "RuleName": "Refinance Expiration Date Error",
        "Condition": "loanDetails.LoanPurpose.ToLower().Contains(\"refinance\") && !string.IsNullOrEmpty(ExpirationDate) && loanDetails.ClosingDate is DateTime && DateTime.Parse(ExpirationDate).Subtract((DateTime)loanDetails.ClosingDate).TotalDays < 60",
        "Action": "AddError(115, \"Policy expires within 60 days of closing date.\", \"\", \"Refinance Expiration Date Error\")"
      },
      {
        "RuleName": "Expiration Date Error",
        "Condition": "!string.IsNullOrEmpty(ExpirationDate) && loanDetails.ClosingDate is DateTime && DateTime.Parse(ExpirationDate) < (DateTime)loanDetails.ClosingDate",
        "Action": "AddError(115, \"Policy expires before loan closes.\", \"ExpirationDate\")"
      },
      {
        "RuleName": "Effective Date Error",
        "Condition": "!string.IsNullOrEmpty(EffectiveDate) && loanDetails.ClosingDate is DateTime && DateTime.Parse(EffectiveDate) > (DateTime)loanDetails.ClosingDate",
        "Action": "AddError(116, \"Effective date cannot be after the closing date.\", \"EffectiveDate\")"
      },
      {
        "RuleName": "LoanNumber Potential Value",
        "Condition": "string.IsNullOrEmpty(LoanNumber) && !string.IsNullOrEmpty(loanDetails.LoanNumber)",
        "Action": "AddPotentialValues(loanDetails.LoanNumber, \"LoanNumber\")"
      },
      {
        "RuleName": "Loan Number Mismatch",
        "Condition": "!string.IsNullOrEmpty(LoanNumber) && !string.IsNullOrEmpty(loanDetails.LoanNumber) && string.Compare(LoanNumber, loanDetails.LoanNumber, true) != 0",
        "Action": "AddError(117, \"There is a potential mismatch between document loan number and LOS loan number.\", \"LoanNumber\")"
      },
      {
        "RuleName": "Deductible - from dwelling coverage",
        "Condition": "!string.IsNullOrEmpty(Deductible) && !string.IsNullOrEmpty(DwellingCoverage) && decimal.Parse(Deductible) < 50M && decimal.Parse(Deductible) >= 0",
        "Action": "AddValue((decimal.Parse(Deductible) > 1 ? decimal.Parse(Deductible) / 100M : decimal.Parse(Deductible)) * decimal.Parse(DwellingCoverage), \"Deductible\") #AddNotes(\"Deductible was converted from percentage of dwelling coverage to a dollar amount\", \"Deductible\")"
      },
      {
        "RuleName": "Deductible Error",
        "Condition": "!string.IsNullOrEmpty(Deductible) && decimal.Parse(Deductible) < 0",
        "Action": "AddError(104, \"Deductible cannot be a negative number.\", \"Deductible\", \"Deductible Error\")"
      },
      {
        "RuleName": "Forward Chaining - MaxDeductible",
        "Condition": "true",
        "Action": "SetVariable(0M, \"MaxDeductible\")"
      },
      {
        "RuleName": "Forward Chaining - MaxDeductible",
        "Condition": "!string.IsNullOrEmpty(Deductible) && !string.IsNullOrEmpty(DwellingCoverage) && (new List<string> { \"farmershomeadministration\", \"usda\" }).Contains(loanDetails?.LoanType?.ToLower()??\"no data\")",
        "Action": "SetVariable(decimal.Parse(DwellingCoverage) * .05M > 1000M? decimal.Parse(DwellingCoverage) * .05M  : 1000M, \"MaxDeductible\")"
      },
      {
        "RuleName": "Validation - Deductible",
        "Condition": "MaxDeductible > 1000M",
        "Action": "AddNotes(string.Format(\"USDA maximum deductible {0:C} calculated using 5% of dwelling coverage\", MaxDeductible), \"Deductible\")"
      },
      {
        "RuleName": "USDA Loan Deductible Error",
        "Condition": "MaxDeductible < decimal.Parse(Deductible)",
        "Action": "AddError(104, string.Format(\"Deductible is greater than maximum deductible {0:C}.\", MaxDeductible), \"Deductible\", \"USDA Loan Deductible Error\")"
      },
      {
        "RuleName": "Florida RCE Exception",
        "Condition": "!string.IsNullOrEmpty(loanDetails?.Property?.State) && loanDetails.Property.State.ToUpper().Contains(\"FL\")",
        "Action": "AddError(104, \"Property is located in Florida. Replacement Cost Estimate unavailable.\", \"ReplacementCoverage\", \"Florida RCE Exception\")"
      },
      {
        "RuleName": "Underwriter Review Needed",
        "Condition": "!string.IsNullOrEmpty(DwellingCoverage) && !string.IsNullOrEmpty(PolicyType) && PolicyType.ToString().ToLower().Contains(\"condo\")",
        "Action": "AddError(104, \"Dwelling coverage not found, policy may need additional review by underwriter.\", \"DwellingCoverage\", \"Underwriter Review Needed\")"
      },
      {
        "RuleName": "Forward Chaining - ExtendedCov",
        "Condition": "true",
        "Action": "SetVariable(0, \"ExtendedCov\")"
      },
      {
        "RuleName": "Forward Chaining - OtherStructure",
        "Condition": "true",
        "Action": "SetVariable(0, \"OtherStructure\")"
      },
      {
        "RuleName": "Forward Chaining - ExtendedCov",
        "Condition": "!string.IsNullOrEmpty(LoanAmount) && !string.IsNullOrEmpty(DwellingCoverage)",
        "Action": "!string.IsNullOrEmpty(ExtendedReplacementCoverage)? SetVariable(decimal.Parse(ExtendedReplacementCoverage) < 1000? (decimal.Parse(ExtendedReplacementCoverage) / 100) * decimal.Parse(DwellingCoverage) : decimal.Parse(ExtendedReplacementCoverage), \"ExtendedCov\"): SetVariable(0, \"ExtendedCov\")"
      },
      {
        "RuleName": "Forward Chaining - OtherStructure",
        "Condition": "!string.IsNullOrEmpty(LoanAmount) && !string.IsNullOrEmpty(DwellingCoverage)",
        "Action": "!string.IsNullOrEmpty(OtherStructures)? SetVariable(decimal.Parse(OtherStructures), \"OtherStructure\"): SetVariable(0, \"OtherStructure\")"
      },
      {
        "RuleName": "Add Potential Value - ReplacementCoverage",
        "Condition": "!string.IsNullOrEmpty(LoanAmount) && !string.IsNullOrEmpty(DwellingCoverage)",
        "Action": "AddPotentialValues(((decimal.Parse(DwellingCoverage) + ExtendedCov + OtherStructure)/decimal.Parse(LoanAmount))*100M, \"ReplacementCoverage\")"
      },
      {
        "RuleName": "Add Note - ReplacementCoverage",
        "Condition": "!string.IsNullOrEmpty(LoanAmount) && !string.IsNullOrEmpty(DwellingCoverage)",
        "Action": "AddNotes(string.Format(\"Replacement coverage potential value determined using calculation ({0} other structure + {1} dwelling coverage + {2} extended replacement coverage) / {3} loan amount.\", ToStringFormat(OtherStructure), ToStringFormat(DwellingCoverage), ToStringFormat(ExtendedCov), ToStringFormat(LoanAmount)), \"ReplacementCoverage\")"
      },
      {
        "RuleName": "Validate - PolicyAmountDue",
        "Condition": "!string.IsNullOrEmpty(AnnualPremium) && !string.IsNullOrEmpty(PolicyAmountPrepaid)",
        "Action": "AddPotentialValues(decimal.Parse(AnnualPremium) - decimal.Parse(PolicyAmountPrepaid), \"PolicyAmountDue\") #AddNotes(\"Potential value derived by subtracting policy amount paid from total premium\", \"PolicyAmountDue\")"
      },
      {
        "RuleName": "Validate - PolicyAmountPrepaid",
        "Condition": "string.IsNullOrEmpty(PolicyAmountPrepaid) && !string.IsNullOrEmpty(AnnualPremium) && !string.IsNullOrEmpty(PolicyAmountDue)",
        "Action": "AddValue(decimal.Parse(AnnualPremium) - decimal.Parse(PolicyAmountDue), \"PolicyAmountPrepaid\") #AddNotes(\"System is calculating policy amount prepaid by subtracting policy amount due from annual premium.\", \"PolicyAmountPrepaid\")"
      },
      {
        "RuleName": "ACV Detected",
        "Condition": "!string.IsNullOrEmpty(AcvPresent) && AcvPresent.ToLower() == \"true\"",
        "Action": "AddError(104, \"MORi has determined that this homeowners policy may provide for claims to be settled on an actual cash value (ACV) basis. Underwriter review is required to determine if this policy meets investor guidelines and/or customer overlays.\", \"AcvPresent\", \"ACV Detected\")"
      },
      {
        "RuleName": "Insufficient Coverage",
        "Condition": "PolicyType == \"Standard_HOI\" && !string.IsNullOrEmpty(ReplacementCoverage) && decimal.Parse(ReplacementCoverage) < clientsRule.HoiReplacementCost",
        "Action": "AddError(118, string.Format(\"Replacement coverage is less than {0}%\", clientsRule.HoiReplacementCost), \"ReplacementCoverage\", \"Insufficient Coverage\")"
      },
      {
        "RuleName": "Insufficient Coverage",
        "Condition": "PolicyType?.ToLower()?.Contains(\"condo\")??false && !string.IsNullOrEmpty(ReplacementCoverage) && decimal.Parse(ReplacementCoverage) < clientsRule.HoiCondoReplacementCost",
        "Action": "AddError(118, string.Format(\"Replacement coverage of at least {0}% required for condos.\", clientsRule.HoiCondoReplacementCost), \"ReplacementCoverage\", \"Insufficient Coverage\")"
      },
      {
        "RuleName": "Deductible Calculation Error",
        "Condition": "!string.IsNullOrEmpty(Deductible) && !string.IsNullOrEmpty(DwellingCoverage) && decimal.Parse(Deductible) > (decimal.Parse(DwellingCoverage) * (clientsRule.HoiDeductiblePercentage / 100))",
        "Action": "AddError(118, string.Format(\"Deductible is greater than {0}% of the Dwelling Coverage.\", clientsRule.HoiDeductiblePercentage), \"\", \"Deductible Calculation Error\")"
      },
      {
        "RuleName": "Forward Chaining - DateErrorFlag",
        "Condition": "true",
        "Action": "SetVariable(false, \"DateErrorFlag\")"
      },
      {
        "RuleName": "Forward Chaining - DateErrorFlag",
        "Condition": "!string.IsNullOrEmpty(EffectiveDate) && loanDetails.ClosingDate is DateTime && loanDetails.LoanPurpose.ToLower().Contains(\"purchase\")",
        "Action": "SetVariable(true, \"DateErrorFlag\")"
      },
      {
        "RuleName": "Effective Date Error",
        "Condition": "DateErrorFlag && loanDetails.ClosingDate.Subtract(DateTime.Parse(EffectiveDate)).TotalDays > clientsRule.HoiEffectiveDateNumDays",
        "Action": "AddError(116, string.Format(\"Policy effective date is not within {0} days of closing date.\", clientsRule.HoiEffectiveDateNumDays), \"\")"
      },
      {
        "RuleName": "Effective Date Month Error",
        "Condition": "DateErrorFlag && clientsRule.HoiEffectiveDateSameMonth && DateTime.Parse(EffectiveDate) < (DateTime)loanDetails.ClosingDate && DateTime.Parse(EffectiveDate).Month != ((DateTime)loanDetails.ClosingDate).Month",
        "Action": "AddError(119, \"Policy effective date is not within the same month as the closing date.\", \"\")"
      }
    ]
  },
  "loanDetails": {
    "LoanGuid": "10008fff-9529-4d83-b0d4-66096424af78",
    "LoanNumber": "230259989",
    "OrgId": null,
    "UniversalLoanId": "549300VMX06UV1F7NS7623025998997",
    "LoanType": "FarmersHomeAdministration",
    "LoanStatus": "File started",
    "FileStartedDate": "2023-02-28T00:00:00",
    "ApplicationDate": "2024-06-20T00:00:00",
    "ClosingDate": "2028-06-01T00:00:00",
    "FundedDate": null,
    "LoanSoldDate": null,
    "ShippedDate": null,
    "CanceledDate": null,
    "LoanPurpose": "Purchase",
    "PropertyType": null,
    "Property": {
      "AddressLineOne": "140 Main St",
      "AddressLineTwo": null,
      "City": "Wintersville",
      "State": "OH",
      "PostalCode": "43952",
      "County": "Jefferson",
      "Country": null,
      "FullAddress": "140 Main St, Wintersville, OH, 43952"
    },
    "LoanAmountOriginal": 60000.0,
    "Impounds": null,
    "InvestorName": "CMG/\\?:[]",
    "InvestorLoanNumber": "123-456-789",
    "MortgageType": null,
    "LienType": "FirstLien",
    "LoanOfficerName": null,
    "LoanOfficerEmail": null,
    "Borrower": {
      "LosId": "5ee88aef-74e3-439e-8b91-0dd4e0c84e34",
      "FullName": "Mary L Lamb",
      "FirstName": "Mary",
      "LastName": "Lamb",
      "MiddleName": "L",
      "Suffix": null,
      "DateOfBirth": "1993-02-06T00:00:00",
      "CurrentAddress": {
        "AddressLineOne": "663 Lincoln Ave",
        "AddressLineTwo": null,
        "City": "Cadiz",
        "State": "OH",
        "PostalCode": "43907",
        "County": "Harrison",
        "Country": "US",
        "FullAddress": "663 Lincoln Ave, Cadiz, OH, 43907"
      },
      "PriorAddress": {
        "AddressLineOne": null,
        "AddressLineTwo": null,
        "City": null,
        "State": null,
        "PostalCode": null,
        "County": null,
        "Country": null,
        "FullAddress": ""
      },
      "MailingAddress": {
        "AddressLineOne": "663 Lincoln Ave",
        "AddressLineTwo": null,
        "City": "Cadiz",
        "State": "OH",
        "PostalCode": "43907",
        "County": null,
        "Country": "US",
        "FullAddress": "663 Lincoln Ave, Cadiz, OH, 43907"
      },
      "YearsAtCurrentAddress": "3",
      "ApplicationId": "5ee88aef-74e3-439e-8b91-0dd4e0c84e34",
      "TaxpayerIdentificationNumber": "123-45-5555"
    },
    "Coborrower": {
      "LosId": "00747eb9-c55f-4956-8152-7e6fbf8cf66f",
      "FullName": null,
      "FirstName": null,
      "LastName": null,
      "MiddleName": null,
      "Suffix": null,
      "DateOfBirth": "0001-01-01T00:00:00",
      "CurrentAddress": {
        "AddressLineOne": null,
        "AddressLineTwo": null,
        "City": null,
        "State": null,
        "PostalCode": null,
        "County": null,
        "Country": null,
        "FullAddress": ""
      },
      "PriorAddress": {
        "AddressLineOne": null,
        "AddressLineTwo": null,
        "City": null,
        "State": null,
        "PostalCode": null,
        "County": null,
        "Country": null,
        "FullAddress": ""
      },
      "MailingAddress": {
        "AddressLineOne": null,
        "AddressLineTwo": null,
        "City": null,
        "State": null,
        "PostalCode": null,
        "County": null,
        "Country": null,
        "FullAddress": ""
      },
      "YearsAtCurrentAddress": null,
      "ApplicationId": "5ee88aef-74e3-439e-8b91-0dd4e0c84e34",
      "TaxpayerIdentificationNumber": null
    },
    "AdditionalBorrowers": [
      {
        "LosId": "90ce4138-7ff9-4213-af22-db946e9384cd",
        "FullName": "George Lamb",
        "FirstName": "George",
        "LastName": "Lamb",
        "MiddleName": null,
        "Suffix": null,
        "DateOfBirth": "1992-05-05T00:00:00",
        "CurrentAddress": {
          "AddressLineOne": "663 Lincoln Ave",
          "AddressLineTwo": null,
          "City": "Cadiz",
          "State": "OH",
          "PostalCode": "43907",
          "County": "Harrison",
          "Country": "US",
          "FullAddress": "663 Lincoln Ave, Cadiz, OH, 43907"
        },
        "PriorAddress": {
          "AddressLineOne": null,
          "AddressLineTwo": null,
          "City": null,
          "State": null,
          "PostalCode": null,
          "County": null,
          "Country": null,
          "FullAddress": ""
        },
        "MailingAddress": {
          "AddressLineOne": null,
          "AddressLineTwo": null,
          "City": null,
          "State": null,
          "PostalCode": null,
          "County": null,
          "Country": null,
          "FullAddress": ""
        },
        "YearsAtCurrentAddress": null,
        "ApplicationId": "90ce4138-7ff9-4213-af22-db946e9384cd",
        "TaxpayerIdentificationNumber": "123-33-3333"
      },
      {
        "LosId": "3a488264-d00e-4b57-b6b7-d19db1b4e92d",
        "FullName": null,
        "FirstName": null,
        "LastName": null,
        "MiddleName": null,
        "Suffix": null,
        "DateOfBirth": "0001-01-01T00:00:00",
        "CurrentAddress": {
          "AddressLineOne": null,
          "AddressLineTwo": null,
          "City": null,
          "State": null,
          "PostalCode": null,
          "County": null,
          "Country": null,
          "FullAddress": ""
        },
        "PriorAddress": {
          "AddressLineOne": null,
          "AddressLineTwo": null,
          "City": null,
          "State": null,
          "PostalCode": null,
          "County": null,
          "Country": null,
          "FullAddress": ""
        },
        "MailingAddress": {
          "AddressLineOne": null,
          "AddressLineTwo": null,
          "City": null,
          "State": null,
          "PostalCode": null,
          "County": null,
          "Country": null,
          "FullAddress": ""
        },
        "YearsAtCurrentAddress": null,
        "ApplicationId": "90ce4138-7ff9-4213-af22-db946e9384cd",
        "TaxpayerIdentificationNumber": null
      }
    ],
    "AllBorrowers": [
      {
        "LosId": "5ee88aef-74e3-439e-8b91-0dd4e0c84e34",
        "FullName": "Mary L Lamb",
        "FirstName": "Mary",
        "LastName": "Lamb",
        "MiddleName": "L",
        "Suffix": null,
        "DateOfBirth": "1993-02-06T00:00:00",
        "CurrentAddress": {
          "AddressLineOne": "663 Lincoln Ave",
          "AddressLineTwo": null,
          "City": "Cadiz",
          "State": "OH",
          "PostalCode": "43907",
          "County": "Harrison",
          "Country": "US",
          "FullAddress": "663 Lincoln Ave, Cadiz, OH, 43907"
        },
        "PriorAddress": {
          "AddressLineOne": null,
          "AddressLineTwo": null,
          "City": null,
          "State": null,
          "PostalCode": null,
          "County": null,
          "Country": null,
          "FullAddress": ""
        },
        "MailingAddress": {
          "AddressLineOne": "663 Lincoln Ave",
          "AddressLineTwo": null,
          "City": "Cadiz",
          "State": "OH",
          "PostalCode": "43907",
          "County": null,
          "Country": "US",
          "FullAddress": "663 Lincoln Ave, Cadiz, OH, 43907"
        },
        "YearsAtCurrentAddress": "3",
        "ApplicationId": "5ee88aef-74e3-439e-8b91-0dd4e0c84e34",
        "TaxpayerIdentificationNumber": "123-45-5555"
      },
      {
        "LosId": "00747eb9-c55f-4956-8152-7e6fbf8cf66f",
        "FullName": null,
        "FirstName": null,
        "LastName": null,
        "MiddleName": null,
        "Suffix": null,
        "DateOfBirth": "0001-01-01T00:00:00",
        "CurrentAddress": {
          "AddressLineOne": null,
          "AddressLineTwo": null,
          "City": null,
          "State": null,
          "PostalCode": null,
          "County": null,
          "Country": null,
          "FullAddress": ""
        },
        "PriorAddress": {
          "AddressLineOne": null,
          "AddressLineTwo": null,
          "City": null,
          "State": null,
          "PostalCode": null,
          "County": null,
          "Country": null,
          "FullAddress": ""
        },
        "MailingAddress": {
          "AddressLineOne": null,
          "AddressLineTwo": null,
          "City": null,
          "State": null,
          "PostalCode": null,
          "County": null,
          "Country": null,
          "FullAddress": ""
        },
        "YearsAtCurrentAddress": null,
        "ApplicationId": "5ee88aef-74e3-439e-8b91-0dd4e0c84e34",
        "TaxpayerIdentificationNumber": null
      },
      {
        "LosId": "90ce4138-7ff9-4213-af22-db946e9384cd",
        "FullName": "George Lamb",
        "FirstName": "George",
        "LastName": "Lamb",
        "MiddleName": null,
        "Suffix": null,
        "DateOfBirth": "1992-05-05T00:00:00",
        "CurrentAddress": {
          "AddressLineOne": "663 Lincoln Ave",
          "AddressLineTwo": null,
          "City": "Cadiz",
          "State": "OH",
          "PostalCode": "43907",
          "County": "Harrison",
          "Country": "US",
          "FullAddress": "663 Lincoln Ave, Cadiz, OH, 43907"
        },
        "PriorAddress": {
          "AddressLineOne": null,
          "AddressLineTwo": null,
          "City": null,
          "State": null,
          "PostalCode": null,
          "County": null,
          "Country": null,
          "FullAddress": ""
        },
        "MailingAddress": {
          "AddressLineOne": null,
          "AddressLineTwo": null,
          "City": null,
          "State": null,
          "PostalCode": null,
          "County": null,
          "Country": null,
          "FullAddress": ""
        },
        "YearsAtCurrentAddress": null,
        "ApplicationId": "90ce4138-7ff9-4213-af22-db946e9384cd",
        "TaxpayerIdentificationNumber": "123-33-3333"
      },
      {
        "LosId": "3a488264-d00e-4b57-b6b7-d19db1b4e92d",
        "FullName": null,
        "FirstName": null,
        "LastName": null,
        "MiddleName": null,
        "Suffix": null,
        "DateOfBirth": "0001-01-01T00:00:00",
        "CurrentAddress": {
          "AddressLineOne": null,
          "AddressLineTwo": null,
          "City": null,
          "State": null,
          "PostalCode": null,
          "County": null,
          "Country": null,
          "FullAddress": ""
        },
        "PriorAddress": {
          "AddressLineOne": null,
          "AddressLineTwo": null,
          "City": null,
          "State": null,
          "PostalCode": null,
          "County": null,
          "Country": null,
          "FullAddress": ""
        },
        "MailingAddress": {
          "AddressLineOne": null,
          "AddressLineTwo": null,
          "City": null,
          "State": null,
          "PostalCode": null,
          "County": null,
          "Country": null,
          "FullAddress": ""
        },
        "YearsAtCurrentAddress": null,
        "ApplicationId": "90ce4138-7ff9-4213-af22-db946e9384cd",
        "TaxpayerIdentificationNumber": null
      }
    ],
    "VestingNonBorrowers": [],
    "Mortgagee": {
      "MortgageeName": "Success Mortgage Partners, Inc. ISAOA, ATIMA",
      "MortgageeAddress": "1200 S. Sheldon Road Ste. 150",
      "MortgageeCity": "Plymouth",
      "MortgageeState": "MI",
      "MortgageePostalCode": "48170",
      "MortgageeClause": null
    }
  }
}
